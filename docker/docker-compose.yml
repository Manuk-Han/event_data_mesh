version: "3.8"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZK_PORT:-2181}:2181"
    volumes:
      - zk-data:/var/lib/zookeeper/data
      - zk-txn-logs:/var/lib/zookeeper/log

  connect-plugins-init:
    image: confluentinc/cp-kafka-connect:7.6.1
    volumes:
      - connect-plugins:/usr/share/confluent-hub-components
    entrypoint:
      - bash
      - -lc
      - >
        confluent-hub install --no-prompt confluentinc/kafka-connect-s3:${S3_PLUGIN_VERSION}
        # && confluent-hub install --no-prompt debezium/debezium-connector-mysql:${DEBEZIUM_MYSQL_VERSION}
        && touch /tmp/ready
        && sleep infinity
    healthcheck:
      test: ["CMD-SHELL", "test -d /usr/share/confluent-hub-components/confluentinc-kafka-connect-s3 && test -f /tmp/ready"]
      interval: 10s
      timeout: 5s
      retries: 12

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_EXTERNAL_PORT:-9092}:9092"
      - "${KAFKA_INTERNAL_PORT:-29092}:29092"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID:-1}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://0.0.0.0:${KAFKA_INTERNAL_PORT:-29092},PLAINTEXT_EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://kafka:${KAFKA_INTERNAL_PORT:-29092},PLAINTEXT_EXTERNAL://${PUBLIC_HOST}:${KAFKA_EXTERNAL_PORT:-9092}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS:-0}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: '-Xmx1G -Xms1G'
      KAFKA_JVM_PERFORMANCE_OPTS: '-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35'
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:${KAFKA_INTERNAL_PORT:-29092} --list >/dev/null 2>&1 || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 20
      start_period: 40s

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    depends_on:
      - kafka
    ports:
      - "${SCHEMA_REGISTRY_PORT:-8081}:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:${KAFKA_INTERNAL_PORT:-29092}
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3

  minio-setup:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb local/mesh-catalog || true &&
      {{ if .Env.MINIO_ANON | default \"false\" | eq \"true\" }} mc anonymous set public local/mesh-catalog && {{ end }}
      echo 'MinIO bucket init done';
      "
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    networks:
      - default

  minio-mc:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET:-lake}
      MINIO_ANON: ${MINIO_ANON:-false}
    entrypoint: >
      /bin/sh -c "
        sleep 5 &&
        mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
        mc mb -p local/${MINIO_BUCKET} || true &&
        if [ \"${MINIO_ANON}\" = \"true\" ]; then mc anonymous set download local/${MINIO_BUCKET} || true; fi &&
        echo 'MinIO setup completed' &&
        sleep infinity
      "

  connect:
    image: confluentinc/cp-kafka-connect:7.6.1
    depends_on:
      - kafka
      - schema-registry
      - minio
      - connect-plugins-init
    ports:
      - "${CONNECT_PORT:-8083}:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:${KAFKA_INTERNAL_PORT:-29092}
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: connect-cluster
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
    volumes:
      - connect-plugins:/usr/share/confluent-hub-components
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  mysql:
    image: mysql:8.4
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    command:
      - --character-set-server=utf8
      - --collation-server=utf8_unicode_ci
      - --default-time-zone=${TIMEZONE:-Asia/Seoul}
      - --server-id=1
      - --log-bin=/var/lib/mysql/mysql-bin
      - --binlog_format=ROW
      - --binlog_row_image=FULL
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL","mysqladmin ping -h 127.0.0.1 -uroot -p${MYSQL_ROOT_PASSWORD} --silent"]
      interval: 10s
      timeout: 5s
      retries: 10

  postgres:
    image: postgres:16
    container_name: mesh-postgres
    environment:
      POSTGRES_DB: ${PG_DB:-mesh}
      POSTGRES_USER: ${PG_USER:-mesh}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-mesh}
      TZ: ${TIMEZONE:-Asia/Seoul}
    ports:
      - "${PG_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${PG_USER:-mesh} -d ${PG_DB:-mesh}" ]
      interval: 10s
      timeout: 5s
      retries: 10

  flyway-registry:
    image: flyway/flyway:10.22
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      FLYWAY_URL: jdbc:postgresql://postgres:5432/${PG_DB:-mesh}
      FLYWAY_USER: ${PG_USER:-mesh}
      FLYWAY_PASSWORD: ${PG_PASSWORD:-mesh}
      FLYWAY_BASELINE_ON_MIGRATE: "true"
    volumes:
      - /home/manuk/data_mesh/module/registry/schema-registry/src/main/resources/db/migration:/flyway/sql:ro
    command: -connectRetries=30 migrate

  # --- Flyway (App / MySQL) ---
  flyway-app:
    image: flyway/flyway:10.22
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      FLYWAY_URL: jdbc:mysql://mysql:3306/${MYSQL_DATABASE}
      FLYWAY_USER: ${MYSQL_USER}
      FLYWAY_PASSWORD: ${MYSQL_PASSWORD}
      FLYWAY_BASELINE_ON_MIGRATE: "true"
    volumes:
      - ./module/domain/app/src/main/resources/db/migration:/flyway/sql:ro
    command: -connectRetries=30 migrate

volumes:
  zk-data:
  zk-txn-logs:
  kafka-data:
  minio-data:
  connect-plugins:
  mysql-data:
  postgres-data:
